var toAsync = require('asf')
var assert = require('assert');

var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);

chai.should();
//console.dir(assert)
function assetPromiseEqual(p1,p2,done){
    var p1v ,p1e;
    var p2v ,p2e;
    return p1.then(function(v){
        p1v = v;
    },function(e){
        p1e = e;
    }).then(
        function(){
           return p2.then(function(v){
               p2v = v;
           },function(e){
               p2e = e;
           }).then(function(){
           //return Promise.reject('111')
                try{


                    assert.deepEqual(p1v,p2v)
                    assert.deepEqual(p1e,p2e)
                    p1e && p2e && assert.deepEqual(p1e.message,p2e.message)
                    return true;
                }catch(e){
                    return false
                }

           })
        }
    ).should.become(true);
}

describe('toAsync', function() {

  describe('any functions support', function() {

    it('null return null ', function() {
        assert.deepEqual(null,toAsync(null))
    }

    it('null return null ', function() {
        async function a(){
        }
        assert.deepEqual(a,toAsync(a))
    }
  }
  describe('#async and toAsync()', function() {

    it('catch then throw', function() {
      return assetPromiseEqual(toAsync(function *(){
              try{
                  var a = yield 1234;
                  var b = yield new Promise(function(a,r){setTimeout(r,10)})
              }catch(e){
                  throw new Error(88888)
              }
              return 123;
          })(),

          (async function(){
                try{
                    var a = await 1234;
                    var b = await new Promise(function(a,r){setTimeout(r,10)})
                }catch(e){
                    throw new Error(88888)
                }
                return 123;
            })()
          )
    });


    it('catch then return', function() {
      return assetPromiseEqual(toAsync(function *(){
              try{
                  var a = yield 1234;
                  var b = yield new Promise(function(a,r){setTimeout(r,10)})
              }catch(e){
                  return a+111+'/'+b
              }
              return 123;
          })(),

          (async function(){
                try{
                    var a = await 1234;
                    var b = await new Promise(function(a,r){setTimeout(r,10)})
                }catch(e){
                    return a+111+'/'+b
                }
                return 123;
            })()
          )
    });
    it('first error',function(){
        return assetPromiseEqual(toAsync(function *(){
            throw new Error(123)
        })(),async function(){throw new Error(123)}());
    })
    it('first then error', function() {
      return assetPromiseEqual(toAsync(function *(){
              var b = yield new Promise(function(a,r){setTimeout(r,10)});
              return '.'+b
          })(),

          (async function(){
                var b = await new Promise(function(a,r){setTimeout(r,10)})
                return '.'+b
            })()
          )
    });


    it('next error', function() {
      return assetPromiseEqual(toAsync(function *(){
              var a = yield 1234;
              a()
              return a+'.'+b
          })(),

          (async function(){
                var a = await 1234;
                a()
                return a+'.'+b
            })()
          )
    });

    it('next then error', function() {
      return assetPromiseEqual(toAsync(function *(){
              var a = yield 1234;
              var b = yield new Promise(function(a,r){setTimeout(r,10)})
              return a+'.'+b
          })(),

          (async function(){
                var a = await 1234;
                var b = await new Promise(function(a,r){setTimeout(r,10)})
                return a+'.'+b
            })()
          )
    });
  });

});