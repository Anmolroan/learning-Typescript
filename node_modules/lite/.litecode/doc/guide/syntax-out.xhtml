[["/doc/guide/syntax-out.xhtml","/doc/guide/layout.xhtml","/doc/guide/layout-main.xhtml","/doc/guide/layout-guestbook.xhtml","/doc/guide/layout-menu.xhtml","/doc/guide/layout-dialog.xhtml","/"],["<!DOCTYPE html>\n<html>\n<head>\n<title>输出语法</title>\n<meta http-equiv='content-type' content='text/html; charset=utf-8'/>\n<link href='default.css' rel='stylesheet' type='text/css'/>\n\n\n</head>\n<body>\n<style>\n.cm-lite-el{ color:#d30;}\r\n\t\t\t.cm-lite-tag{\r\n\t\t\tcolor:#9933FF;font-weight:bold;}\n</style>\n<script src='http://www.xidea.org/lite/codemirror/o.js'><\/script>\n<script src='editor.js'><\/script>\n<div id='main'>\n<div id='header'>\n<div class='logo'\nonclick='location = &#39;http://www.xidea.org/lite/&#39;'>\n",[5,["\n<div style='left:",[3,[96,[-2,"item"],[-1,0]],null],"px;top:",[3,[96,[-2,"item"],[-1,1]],null],"px;width:",[3,[96,[-2,"item"],[-1,2]],null],"px;height:",[3,[96,[-2,"item"],[-1,3]],null],"px;'> </div>\n"],[64,[64,[64,[64,[64,[64,[64,[-3],[64,[64,[64,[64,[-3],[-1,0]],[-1,0]],[-1,19]],[-1,100]]],[64,[64,[64,[64,[-3],[-1,0]],[-1,81]],[-1,42]],[-1,19]]],[64,[64,[64,[64,[-3],[-1,23]],[-1,0]],[-1,19]],[-1,19]]],[64,[64,[64,[64,[-3],[-1,23]],[-1,23]],[-1,19]],[-1,54]]],[64,[64,[64,[64,[-3],[-1,46]],[-1,0]],[-1,42]],[-1,19]]],[64,[64,[64,[64,[-3],[-1,46]],[-1,23]],[-1,19]],[-1,77]]],[64,[64,[64,[64,[-3],[-1,69]],[-1,81]],[-1,19]],[-1,19]]],"item"],"\n</div>\n<h1>\n输出语法\n</h1>\n<div class='top-box'>\n<div id='i18n'>\n<span class='i18n_zh'\nonclick='i18n_reload(\"zh\")'>中文</span>|\n<span class='i18n_en'\nonclick='i18n_reload(\"en\")'>English</span>\n<div style='display:none'>\n|<input type='checkbox' id='i18n_on' checked='checked'/>\n<label for='i18n_on' title='右键点击内容片段在弹出框输入翻译'>翻译</label>\n</div>\n<script>/*<![CDATA[*/\n\nvar cookie = ''+document.cookie;\nvar i18n_lang = cookie.replace(/^.*\\bi18n_lang=([\\w]+).*$/,'$1');\nif(i18n_lang == cookie){i18n_lang = 'cn'}\nfunction i18n_reload(i18n_lang){\ndocument.cookie = 'i18n_lang='+i18n_lang;\nlocation.reload();\n}\ndocument.getElementById('i18n').className ='i18n_'+ i18n_lang;\nvar i18n_on = document.getElementById('i18n_on')\ndocument.body.oncontextmenu=function(event){\nif(i18n_on.checked ||true){\nvar event = event || window.event;\nvar src = event.target || event.srcElement;\nvar id = src.getAttribute('data-i18n-key');\nif(id){\nvar oldvalue = src.innerHTML;\nvar value = prompt('更正翻译('+i18n_lang+')：',oldvalue);\nif(value && value != oldvalue){\nvar data = 'i18n_action=save&i18n_id='+encodeURIComponent(id)+'&i18n_value='+encodeURIComponent(value);\npostData(location.href,data,function(){\nsrc.innerHTML = value;\n});\n}\nreturn false;\n}\t\n}\n}\n\n//]]><\/script>\n</div>\n<div class='test'><a href='../test.xhtml' class=' missed'>查看测试报表</a></div>\n</div>\n<div class='line'></div>\n</div>\n<div id='content'>\n\n<h3>功能支持</h3>\n<ul>\n<li>表达式输出\n<p>将模板变量或表达式运算值按照指定规则输出。</p>\n</li>\n<li>日期格式化输出\n<p>一种跨平台统一的日期格式化模式：<a href='syntax-date.xhtml' class=' missed'>syntax-date.xhtml</a>。</p>\n</li>\n</ul>\n<h3>表达式输出</h3>\n<p>\n输出动态数据是模板最基本的功能，Lite可以将表达式的值，通过如下三种方式输出：</p>\n<ul>\n<li>\n<strong>HTML/XML自动编码输出（${...}）。</strong>\n<p>\n在HTML/XML文本中，为了确保代码安全性， XML保留字符\n<strong>(&lt;&amp;)</strong>\n和属性中的\n<strong>(\")</strong>\n都将被自动转义；\n</p>\n<p>\n脚本/资源地址中的表达式，将自动加上JSON.stringify和encodeURIComponent。\n</p>\n<p>\n关于自动编码的详细介绍，请参考：\n<a href='feature-autoencode.xhtml' class=' missed'>自动编码特性介绍</a>\n</p>\n<p>\n自动编码的表达式，如果是属性的单一值，他还具备一个隐含的特设功能：条件属性输出！\n<i>\n<p>\n在XML 属性中，如果属性值为单一表达式且运行时表达式值为\n<strong>null</strong>，则整个属性不输出，否则自动按xml属性的编码规则(&lt;&amp;和\n<strong>\"</strong>\n)，编码XML属性内容并输出。\r\n\r\n\t\t\t\t\t\t\t这点在html 定值属性（如：disabled/checked/selected/...）输出时非常有用。\n</p>\n</i>\n</p>\n</li>\n<li>\n<strong>避免过度转义的安全输出（$#{...}）。</strong>\n<p>有的时候，特别是老的GBK中文环境下，我们数据库中存储有字符实体(如：&amp;#0x7C21;&amp;#0x7E41;);\r\n\t\t\t\t\t默认的自动编码输出，在这些数据的输出展现的时候，不能直接用完全编码输出的方式。</p>\n</li>\n<li>\n<strong>XSS风险自负的直接输出（$!{...}）。</strong>\n<p>慎用！！！</p>\n</li>\n</ul>\n<h3>日期格式化输出语法</h3>\n<p>\n该详细功能请参考独立文档：<a href='syntax-date.xhtml' class=' missed'>syntax-date.xhtml</a>\n</p>\n<h3>示例</h3>\n<ul>\n<script>//<![CDATA[\n__id__1495038255295_45=[\"{\\n\\tauthor:{\\n\\t\\t//百度曾碰到过的严重xss漏洞。用户名带有关键字，导致该用户去哪哪瘫痪！\\n\\t\\tusername:'危险分子 <script\\>',\\n\\t\\t//打破属性规则，插入危险代码\\n\\t\\ttitle:'坏蛋！ \\\" onclick=\\\"alert(\\\\'插入危险代码成功!!\\\\')',\\n\\t\\tdisabled:false\\n\\t},\\n\\tblog:{\\n\\t\\t'title':'html特殊字符：&<\\\"',\\n\\t\\t'content':'lite应该怎么自动编码这些特殊字符呢？'+\\n\\t\\t\\t\\t'XML特殊字符有两个:&<，加上属性括弧\\\",一共三个'+\\n\\t\\t\\t\\t'（LiteXML属性括弧一律自动转化为\\\"）；'+\\n\\t\\t\\t\\t'只要编码好这些特殊字符，用户就很难插入危险代码了。\\\\n\\\\n'+\\n\\t\\t\\t\\t'但是，有的时候，特别是老的GBK中文环境下，我们数据库中存储有字符实体，比如：&#0x7C21;&#0x7E41;&#0x6F22;&#0x5B57;。'+\\n\\t\\t\\t\\t'我们还要让这些字符实体不过度转义。'\\n\\t}\\n}\",null];\n//]]>\n<\/script>\n<script>//<![CDATA[\nblogModel=__id__1495038255295_45[0];\n//]]>\n<\/script>\n\n<script>//<![CDATA[\n__id__1495038255300_25=[\"<!-- 自动编码，免遭一劫 -->\\n<span class=\\\"user\\\" title=\\\"${author.title}\\\">${author.username}</span>\\n\\n....\\n<!-- 条件属性就是方便（如果属性值为null，则整个属性不输出） -->\\n<input type=\\\"submit\\\" value=\\\"发表留言\\\" disabled=\\\"${author.disabled||null}\\\"/>\\n\\n\\n\\t\\t\\n<!-- ${blog.title} 将按属性规则编码，确保不打破属性语义。 -->\\n<!-- ${blog.content} 将按属性xml文本编码，确保不被插入危险标签。 -->\\n<p title=\\\"${blog.title}\\\">${blog.content}</p>\\n<!-- 避免过度转义： 网开一面的$#{...} 语法！-->\\n<p title=\\\"${blog.title}\\\">$#{blog.content}</p>\\n\\n<!-- 不建议的危险代码 ,用户可以为所欲为，插入任意代码了！-->\\n<p title=\\\"$!{blog.title}\\\">$!{blog.content}</p>\",blogModel];\n//]]>\n<\/script>\n<div class='code'><script>renderSource(__id__1495038255300_25[0],__id__1495038255300_25[1],'');<\/script></div>\n</ul>\n\n<div id='post'>\n\n<div class='ds-thread'></div>\n<script type='text/javascript'>\nvar duoshuoQuery = {short_name:\"lite\"};\n(function() {\nif(location.hostname == 'localhost')return;\nvar ds = document.createElement('script');\nds.type = 'text/javascript';ds.async = true;\nds.src = 'http://static.duoshuo.com/embed.js';\nds.charset = 'UTF-8';\n(document.getElementsByTagName('head')[0] \n|| document.getElementsByTagName('body')[0]).appendChild(ds);\n})();\n<\/script>\n\n</div>\n</div>\n<div id='footer'></div>\n</div>\n<div id='menu'>\n<div class='menuInner'>\n<h3>入门</h3>\n<ul>\n<li>\n<a href='index.xhtml'>Lite模板简介</a>\n</li>\n<li>\n<a href='install.xhtml'>测试与安装</a>\n</li>\n</ul>\n<h3>表达式参考</h3>\n<ul>\n<li>\n<a href='el.xhtml'>什么是表达式</a>\n</li>\n<li>\n<a href='el-value.xhtml'>变量/原子值/复合值</a>\n</li>\n<li>\n<a href='el-op.xhtml'>操作符与函数</a>\n</li>\n<li>\n<a href='el-function.xhtml'>内置函数参考</a>\n</li>\n</ul>\n<h3>核心模板语法参考</h3>\n<ul>\n\n<li>\n<a href='syntax-out.xhtml'>输出语法[${},$!{},$#{},日期]</a>\n</li>\n<li>\n<a href='syntax-if.xhtml'>条件判断[c:if]</a>\n</li>\n<li>\n<a href='syntax-choose.xhtml'>分支选择[c:choose]</a>\n</li>\n<li>\n<a href='syntax-for.xhtml'>四种循环[c:for]</a>\n</li>\n<li>\n<a href='syntax-extends.xhtml'>模板继承[c:extends]</a>\n</li>\n<li>\n<a href='syntax-include.xhtml'>静态包含[c:include]</a>\n</li>\n<li>\n<a href='syntax-var.xhtml'>变量申明[c:var]</a>\n</li>\n<li>\n<a href='syntax-def.xhtml'>模板函数申明[c:def]</a>\n</li>\n<li>\n<a href='syntax-extension.xhtml'>自定义扩展[c:extension]</a>\n</li>\n</ul>\n<h3>XML/HTML相关语法参考</h3>\n<ul>\n<li>\n<a href='syntax-trim.xhtml'>注释/语法空格控制[h:trim]</a>\n</li>\n<li>\n<a href='syntax-client.xhtml'>前端模板函数申明[h:client]</a>\n</li>\n<li>\n<a href='syntax-autoform.xhtml'>自动表单[h:autofrom]</a>\n</li>\n<li>\n<a href='feature-autoencode.xhtml'>自动编码</a>\n</li>\n<li>\n<a href='feature-xml.xhtml' title='标记语言特有的语法，如：条件属性,自动编码,自动语义补全等...'>其他特性</a>\n</li>\n</ul>\n<h3>开发调试辅助</h3>\n<ul>\n<li>\n<a href='debug-model.xhtml'>查看数据模型</a>\n</li>\n<li>\n<a href='debug-log.xhtml'>查看编译日志</a>\n</li>\n</ul>\n<h3>编译打包</h3>\n<ul>\n<li>\n<a href='compiler-cmd.xhtml'>批量编译</a>\n</li>\n<li>\n<a href='compiler-spec.xhtml'>编译规范</a>\n</li>\n<li>\n<a href='compiler-api.xhtml'>自定义编译</a>\n</li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>\n<a href='faq-newer.xhtml'>致初学者</a>\n</li>\n<li>\n<a href='faq-badcase.xhtml'>常犯错误</a>\n</li>\n<li>\n<a href='https://github.com/jindw/lite/issues#faq-plan.xhtml'>开发计划</a>\n</li>\n</ul>\n<h3>二次开发参考</h3>\n<ul>\n<li>\n<a href='dev-function.xhtml'>扩展运行时函数(PHP)</a>\n</li>\n<li>\n<a href='dev-function.xhtml'>扩展运行时函数(Java)</a>\n</li>\n<li>\n<a href='dev-extension.xhtml'>扩展模板语法</a>\n</li>\n<li>\n<a href='dev-data-view.xhtml'>扩展数据模型调试窗口</a>\n</li>\n<li>\n<a href='dev-translator.xhtml'>创建新的运行环境</a>\n</li>\n</ul>\n</div>\n</div>\n<div class='dialog'>\n<div class='mask'></div>\n<div id='exampleRunner'>\n<div class='head'>\n===模板测试 ===\n<a class='close'\nonclick='closeExample()'>X</a>\n</div>\n<div class='jsonSource'>\n<h5>数据模型</h5>\n<script>\nvar jsonEditor = CodeMirror(placeMirror, {\nvalue: '',\nlineNumbers: true,\nmode: {name:\"javascript\",json:true}\n});\n<\/script>\n</div>\n<div class='templateSource'>\n<h5>模板代码</h5>\n<script>\nvar templateEditor = CodeMirror(placeMirror, {\nvalue: '',\nlineNumbers: true,\nmode: {name:\"litexml\"}\n});\n\n<\/script>\n</div>\n<div class='resultSource' id='exampleResult'>\n<h5>结果输出</h5>\n<div id='resultLoader'></div>\n<div id='resultSource'>\n<script src='c.js'><\/script>\n</div>\n</div>\n<div class='toolbar'>\n<input type='button' value='编译(JavaScript)'\nonclick='compileToJS()'/>\n<input type='button' value='编译(NodeJS)'\nonclick='compileToNodeJS()'/>\n<input type='button' value='编译(PHP)'\nonclick='compileToPHP()'/>\n<input type='button' title='lite' value='编译(Java)'\nonclick='compileToLite()'/>\n<input type='button' id='runButton' disabled='disabled' value='运行(?)'\nonclick='runTemplate()'/>\n</div>\n</div>\n</div>\n<script>/*<![CDATA[*/\nvar menu = document.getElementById('menu');\nvar menuContent = menu.firstChild;\nmenuContent = menuContent.nodeType==1 ?menuContent:menuContent.nextSibling;\nvar as = document.body.getElementsByTagName('a');\nvar height = menu.scrollHeight;\nfor(var i = as.length;i--;){\nvar a = as.item(i);\nif(/\\bcurrent\\b/.test(a.className)){\nvar t= a.offsetTop;\nvar bt = height - t;\n\nif(bt<120){\nmenuContent.scrollTop = -bt+Math.min(150,height/3)+15\n}\n\n} \n}\n//]]><\/script>\n</body>\n</html>"],{"encoding":"utf-8","contentType":"text/html;charset=utf-8","layout":"/doc/guide/layout.xhtml"}]