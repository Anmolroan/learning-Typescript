<!DOCTYPE html>
<html xmlns:x="http://www.xidea.org/lite/example" xmlns="http://www.w3.org/1999/xhtml"
	xml:lang="zh-CN" dir="ltr">
	<head>
		<title>静态文件编译规范 .</title>
	</head>
	<body>
		<h3>基本风格</h3>
		<p>不作恶，基于已有语法，这是Lite一贯坚持的风格，在静态资源编译规范中也体现的淋漓尽致^_^</p>
		<a name="js"/>
		<!--
		<h3>JS处理规范</h3>
		<ul>
			<li>合并规范
				<p>文件合并采用javascript已有的document.write脚本html代码的方式，基于js/html已有的规则和行为。
				但是，为了避免与代码逻辑中确实需要的document.write的信息冲突，我们采用前面加个<strong>!</strong>操作符的方式加以区别。
				</p>
				<label>示例代码见：</label>
				<p>
					<x:code>
					!document.write("&lt;script src='/static/js/absolute-path1.js'>&lt;/script>");
					!document.write("&lt;script src='/static/js/absolute-path2.js'>&lt;/script>");
					!document.write("&lt;script src='/static/js/absolute-path3.js'>&lt;/script>");
					</x:code>
				</p>
				<p>建议有 !document.write 的脚本不要在有脚本内容（若有，将与大多数浏览器一致，合并在document.write的其他脚本之前）。</p> 
				<p>不建议嵌套 !document.write，因为嵌套document.write 在不同浏览器上表现不完全一致。</p>
			</li>
			<li>压缩规范
				<p>上线的JS必须被压缩</p>
				<p><i>默认清理首尾注释和前置空行，如果网站带有JSA或者YUI库（WEB-INF/lib中），将自动采用这些工具压缩。</i></p>
			</li>
			
			<li>
				其他
				<p>
					脚本调试信息清理
				</p>
			</li>
			<li>行内JS与外链JS</li>
		</ul>
		<a name="css"/>
		<h3>CSS处理规范</h3>
		<ul>
			<li>合并规范
				<p>CSS 合并采用CSS 自身的import 语法，因为某些问题，这个语法基本是是不推荐的状态，但是，我们完全可以借用。</p>
				<p>
					<x:code>
					@import url('/static/css/inc/absolute-path1.css')
					@import url('/static/css/inc/absolute-path2.css')
					</x:code>
				</p>
				<p>@import 语法后面一定要用url标注被包含css路径(见资源地址规范)。</p>
				<p>@import 的css 将出现在@import 出现的位置。</p>
			</li>
			<li>压缩规范
				<p>上线的CSS必须被压缩</p>
				<p><i>默认实现中，他清理首尾注释和前置空行，建议用户重新实现css压缩程序。</i></p>
			</li>
			<li>图片合并规范
				<p>待续。。。</p>
			</li>
		</ul>
		<a name="resource"/>
		<h3>资源地址书写规范</h3>
		<ul>
			<li>模板中的资源地址
				<p>模板中的资源地址默认</p>
			</li>
			<li>CSS中的资源地址
				<p>CSS 中的资源地址(如背景图片)一律采用url()标注，以便编译器查找。</p>
			</li>
			<li>JavaScript中的资源地址
				<p>JavaScript 中的资源地址一律采用encodeURI()函数标注，以便编译器查找。</p>
				<p>这种方式被认为是多此一举，但是，为了我们的资源地址可被有效替换（如线上地址替换，自动添加MD5戳），我们需要一个标注的方法，encodeURI这个函数，也算一个不错的选择。
				</p>
			</li>
		</ul>
	-->
		<h3>模板HTML规范检查</h3>
		<p>
			检查HTML5规范之外的标签，属性，主要用于发现书写错误，改良编码习惯。
			<a href="compiler-api.xhtml#htmlValidate">更多信息</a>。
		</p>
		<ul>
			<li>
				检查模板中出现的全部 html标签，如果您试用的标签不是html规范，编译期间将给出警告。
			</li>
			<li>
				检查模板中出现的全部 html属性，如果您试用的标签不是html规范或者是不推荐规范，编译期间将给出警告。
			</li>
			<li>
				检查特定标签内容，发现并警告代码问题，比如出现的src="" 的img标签（将导致当前页重新请求，引发性能问题）。
			</li>
		</ul>
		<p><i>默认实现中，只能检查合法的xhtml文件（lite源码）</i></p>
		
		<h2>文档更新中...</h2>
	</body>
</html>
