<!DOCTYPE html>
<html xmlns:x="http://www.xidea.org/lite/example" xmlns="http://www.w3.org/1999/xhtml"
	xml:lang="zh-CN" dir="ltr">
	<head>
		<title>基于本地调试环境与整站编译功能需求</title>
	</head>
	<body>
		<h3>目标：</h3>
		<p>
			实现一个无任何环境依赖的完全本地化，完全自动化的开发测试环境和线上编译环境。
		</p>
		<p>浏览即编译，编译即测试，测试即警告，手工点击与批量处理以相同机制。</p>
		<h3>本地开发调试</h3>
		<ul>
			<li>
				本地资源文件浏览测试
				<ul>
					<li>
						直接以源码目录为工作目录
						<p>源码的内容，或者可以通过源码生成的内容，直接对浏览器提供服务。</p>
					</li>
					<li>
						静态资源组织规范及自动化
						<p>包括但不限于：</p>
						<ul>
							<li>开发模式和调试模式的自动切换。</li>
							<li>
								CSS Sprite自动化
								<p>过滤css内容，预览目标文件（保持源码干净，可不写文件，直接放在服务器的共享内存中）。</p>
								<p>方案1：基于目录和命名规则的自动图片合并
									<ul>
										<li>每个目录合并为一个文件</li>
										<li>文件只能竖排（默认）或者横排(有y平铺或者多个bottom对齐图像)</li>
										<li>文件下标描述文件的对齐属性和margin属性
											<p>例如:image[xb200].png表示图片需要x方向平铺，bottom对齐，留白（这里是向上）200像素</p>
											<p>属性说明：[xy]分别表示x,y方向平铺（只能有一个方向，否则不能合并）；[rb]分别表示right,bottom 两个特殊方向对齐（默认的left，top对齐）； 如果有数字，数字表示该图片需要留白的空间。</p>
										</li>
									</ul>
								</p>
							</li>
							<li>JS 模块化和调试相关的文件自动修改和自动生成。</li>
						</ul>
					</li>
				</ul>
			</li>
			<li>
				模板/程序的测试
				<p>准备做一个统一的模板测试平台，采用相同的策略同时支持：
					<a href="./index.xhtml">跨平台的Lite</a>,
					<a href="http://freemarker.sf.net/">Java FreeMarker </a>,
					<a href="http://velocity.apache.org">Java Velocity</a>,
					<a href="http://www.smarty.net">PHP Smarty</a>
					等常用模板系统
				</p>
				<p>功能包括</p>
				<ul>
					<li>自动化开发环境模拟与脚手架搭建
						<p>直接点击一个按钮初始化开发环境，部署实例代码。</p>
					</li>
					<li>
						本地预览测试
						<ul>
							<li>
								本地预览测试
							</li>
							<li>本地数据模拟【参考：
								<a href="debug-model.xhtml">Lite数据调试</a>
								】</li>
						</ul>
					</li>
					<li>
						线上调试方案
						<ul>
							<li>线上数据模拟</li>
							<li>线上问题定位</li>
						</ul>
					</li>
				</ul>
			</li>

			<li>
				低级错误预览期自动检查
				<ul>
					<li>js语法错误,css规范,html手误等等.</li>
				</ul>
			</li>
		</ul>
		<h3>上线前编译优化</h3>
		<ul>
			<li>
				文件合并压缩
				<ul>
					<li>
						实现完全自动化
						<p>实现完全自动化，浏览即编译，按需处理。</p>
					</li>
				</ul>
			</li>
			<li>
				前端优化方案
				<ul>
					<li>
						静态文件永久缓存
						<p>自动实现永久缓存需要的源码和配置修改</p>
					</li>
					<li>
						文件组织与按需装载
						<p>结合规范实现。</p>
					</li>
				</ul>
			</li>
		</ul>
		<h3>定制与二次开发</h3>
		<ul>
			<li>
				框架
				<p>框架分：编译调度，编译插件，Web服务器，脚手架四大部分</p>
			</li>
			<li>
				扩展
				<ul>
					<li>
						编译调度
						<p>编译调度一文件为中心， 每个文件浏览时，涉及的插件， 关联的状态，
							需要访问的文件（依赖）等，任意一处变化，都会触发编译调度系统重新编译你的文件。</p>
						<p>编译调度不可扩展， 系统会自动完成。</p>
					</li>
					<li>
						编译插件
						<p>编译插件分插件运行环境和插件自身， 插件自身由javascript编写， 可以任意修改和配置，
							系统会提供一组实用API（如文件读写函数，图片读写函数，JS压缩函数）</p>
						<p>插件自身可以自由定制，插件运行环境由不可定制。</p>
					</li>
					<li>
						Web服务器
						<p>Web服务器可以选择编译系统， 用来输出预处理之后的内容，
							还可以定制路由规则，让你用编程语言自定义请求，主要用于处理模板和测试程序。</p>
						<p>可定制路由，用编程语言处理预览请求</p>
					</li>
					<li>
						脚手架
						<p>一个独立网站，网站程序运行中，可以获得当前项目信息，实现诸如文件生成向导一类的工作。</p>
					</li>
				</ul>
			</li>
		</ul>
		<h3>未来关注点</h3>
		<ul>
			<li>JavaScript模块化
				<p>document.write只是一种过度方案</p>
			</li>
			<li>NodeJS
				<p>调研一下直接采用 NodeJS API架构的可行性。</p>
			</li>
		</ul>
	</body>
</html>
