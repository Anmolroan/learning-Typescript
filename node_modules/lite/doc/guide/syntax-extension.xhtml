<html xmlns:x="http://www.xidea.org/lite/example" xmlns="http://www.w3.org/1999/xhtml"
	xml:lang="zh-CN" dir="ltr">
	<head>
		<title>模板编译扩展</title>
	</head>
	<body>
		<h3>功能支持</h3>
		<p>
			Lite 是一个模板平台，而不仅仅是一个模板系统，我们可以在这个平台上自己设计模板语法。

			在现有基础上，我们可以通过如下三种形式扩展模板语法。
			<ul>
				<li>扩展名称空间标签语法。</li>
				<li>扩展名称空间属性语法。</li>
				<li>扩展文本语法。</li>
			</ul>

			本文，我们将重点介绍标签语法的扩展方法。
		</p>
		<h3>API结构</h3>
		<p>
			Lite 一共有9中中间代码，一个通用的结束指令，一个批量条件接口，一个静态文本添加接口，共有12个中间指令操作接口。
			他们分别是：
			<ul class="api">
				<li>
					append(text)
					<p>
						用于添加静态文本。
						<x:code model="{}" var="api_append">
						<![CDATA[
						<!-- 扩展html 语法 -->
						<c:extension namespace="http://www.w3.org/1999/xhtml">
							//我需要一个插件，让所有a标签都加上一个中括弧([]),实现代码如下。
							function parseA(node){
								this.append('[');
								//让下一个解析器实现最终解析
								this.next(node);
								this.append(']');
							}
						</c:extension>
						<a href="#1"/><a href="#2"/>
						]]>
						</x:code>
					</p>
				</li>
				<li>
					appendEL(el)
					<p>
						用于添加一段表达式输出（不编码）

						<x:code model="{action:'敲代码',result:'&lt;script>出个xss漏洞也算正常^_^&lt;/script>'}" var="api_appendEL">
					<![CDATA[
					<!-- 扩展Example 语法 -->
					<div xmlns:x="http://www.xidea.org/lite/example">
						<c:extension namespace="http://www.xidea.org/lite/example">
							/* 扩展content属性(为了简单，没有做IE兼容) */
							function parseEL(node){
								var value = node.textContent;
								this.appendEL(value);
							}
						</c:extension>
						<x:el>'一年有'+24*365 +'小时在'+action</x:el>
						<x:el>result</x:el>
					</div>
					]]>
						</x:code>

						<c:comment>
							<x:code model="{}" var="api_appendEL">
					<![CDATA[
					<!-- 扩展Example 语法 -->
					<div xmlns:x="http://www.xidea.org/lite/example">
						<c:extension namespace="http://www.xidea.org/lite/example">
							/* 扩展content属性(为了简单，没有做IE兼容) */
							function parse2content(attr){
								var value = attr.value;
								var el = attr.ownerElement;
								el.removeAttributeNode(attr);
								el.textContent = value;
							}
						</c:extension>
						<div x:content="${1>2}">这里的内容会自动被x:content 中的定义代替</div>
					</div>
					]]>
							</x:code>
						</c:comment>
					</p>
				</li>
				<li>
					appendIf(el)
					<p>
						用于开始一个条件判断（结束用appendEnd()）
						<x:code model="{}" var="api_appendIf">
					<![CDATA[
					<!-- 扩展html 语法 -->
					<c:extension namespace="http://www.w3.org/1999/xhtml">
						function parseIf(node){
							var el = node.getAttribute('test');
							el = el.replace(/^\$\{([\s\S]+)\}$/,'$1');
							this.appendIf(el);
							this.parse(node.childNodes);
							this.appendEnd();
						}
					</c:extension>
					<if test="${1<2}"><div>1<2</div></if>
					<if test="${1>2}"><div>1>2</div></if>
					]]>
						</x:code>
					</p>
				</li>
				<li>
					appendElse(el)
					<p>用于开始一个条件判断（结束用appendEnd()）
					<x:code model="{}" var="api_appendElse">
					<![CDATA[
					<!-- 扩展html 语法 -->
					<c:extension namespace="http://www.w3.org/1999/xhtml">
						function parseIf(node){
							var el = node.getAttribute('test');
							el = el.replace(/^\$\{([\s\S]+)\}$/,'$1');
							this.appendIf(el);
							this.parse(node.childNodes);
							this.appendEnd();
						}
						function parseElse(node){
							var el = node.getAttribute('test');
							el = el.replace(/^\$\{([\s\S]+)\}$/,'$1');
							this.appendElse(el || null);
							this.parse(node.childNodes);
							this.appendEnd();
						}
					</c:extension>
					<if test="${1>2}"><div>if: 1>2</div></if>
					<else test="${1<2}"><div>else if : 1<2</div></else>
					<else><div>else </div></else>
					]]>
						</x:code>
					
					</p>
				</li>
				<li>
					appendEnd()
					<p>通用的结束符（用于结束一个if语法，for循环，plugin等等...）</p>
				</li>
				<li>
					appendFor(varName, el, status)
					<p>开始一个for循环,el表达式需要是一个符合javascript语法规则的表达式（不允许Core:for 标签中的 .. 语法）</p>
					<p>el值类型只能有 list(Array),number(循环次数),map（Object，循环key 相当于 JavaScript的 for in 语法）
						<x:code model="{list:[1,2,3,4]}" var="api_appendFor">
					<![CDATA[
					<!-- 扩展html 语法 -->
					<c:extension namespace="http://www.w3.org/1999/xhtml">
						function parseFor(node){
							var varName = node.getAttribute('var');
							var el = node.getAttribute('list');
							var status = node.getAttribute('status');
							el = el.replace(/^\$\{([\s\S]+)\}$/,'$1');
							this.appendFor(varName,el,status);
							this.parse(node.childNodes);
							this.appendEnd();
						}
					</c:extension>
					<for var="item" list="${list}" status="status"><div>${item}/${status.index}</div></for>
					]]>
						</x:code>
					
					</p>
				</li>
				<li>
					appendXA(attrName, el)
					<p>添加一个XML 属性，当attrName 为空时，只做属性编码输出，不做属性语法输出（输出判断+属性名=".."）。
					
						<x:code model="{list:[1,2,3,4]}" var="api_appendXA">
					<![CDATA[
					<!-- 扩展html 语法 -->
					<c:extension namespace="http://www.w3.org/1999/xhtml">
						/**
						 * 重新定义 input 解析规则。
						 * 让属性： readonly autofocus checked disabled required 不用带值，标签也可以省去关闭语法
						 */
						function parseInput(node){
							var attributes = node.attributes;
							this.append('<'+node.tagName);
							for (var i=0; i<attributes.length; i++) {
							    var attr = attributes.item(i);
							    if(/readonly|autofocus|checked|disabled|required/.test(attr.name)){
							    	this.appendText(" "+attr.name)
							    }else{
							    	this.parse(attr);
							    }
							}
							this.append('>')
						}
					</c:extension>
					<input checked disabled  value="test"/>
					]]>
						</x:code>
					
					</p>
				</li>
				<li>
					appendXT(el)
					<p>添加一个XML文本输出</p>
				</li>
				<li>
					appendVar(varName, el)
					<p>申明一个模板变量</p>
				</li>
				<li>
					appendCapture(varName)
					<p>捕捉一段输出，将结果申明为指定变量名</p>
				</li>
				<li>
					appendPlugin(pluginClass, pluginConfig)
					<p>添加插件</p>
				</li>
				<li>
					appendAll(list)
					<p>将一组中间代码，批量添加进来。</p>
				</li>
			</ul>
		</p>
		<p></p>
		<h3>示例1</h3>
		<ul>
			<p>有没有为javascript多行字符串申明苦恼过？我们可以写一个模板扩展，让这个事情顺利一点。</p>
			<x:code model="{}">
			<![CDATA[
			<html xmlns:x="http://www.xidea.org/lite/example">
			<head>
			<title>==测试==</title>
			<c:extension namespace="http://www.xidea.org/lite/example">
				<![CDATA[
				function parseString(node){
					var text = String(node.textContent || node.text);
					text = text.replace(/^\s*[\r\n]+|[\r\n]+\s*$/g,'');
					var varName = node.getAttribute('var');
					this.appendText("<script>var "
						+varName+'='+JSON.stringify(text)
						+";<\/script>");
				}
				]]>]]<![CDATA[>
			</c:extension>
			</head>
			<body>
				<x:string var="source">
				<![CDATA[
				<html>
				<body>
					随便写点什么
				</body>
				</html>
				]]>]]<![CDATA[>
				</x:string>
			</body>
			</html>
			]]>
			</x:code>
		</ul>
		<h3>示例2</h3>
		<ul>
			<p>有时候，我们需要吧一些有换行的文本显示成换行，但是，有希望代码是编码安全的。通常，这种功能只能通过内置函数实现。
				现在，我们尝试用一个插件解决这个问题。
			</p>
			<x:code model="{text: '第一行\n第二行\n第三行\n<script>//第四行是一段源码<\/script>'}">
			<![CDATA[
			<html xmlns:x="http://www.xidea.org/lite/example">
			<head>
			<title>==测试==</title>
			<c:extension namespace="http://www.xidea.org/lite/example">
				<![CDATA[
				function parseNL2BR(node){
					var text = String(node.textContent || node.text);
					var varId = this.allocateId();
					//生成内容
					this.appendCapture(varId)
					//以不编码的方式捕捉内容
					var list = this.parseText(text,0);
					this.appendAll(list);
					this.appendEnd();
					
					//将生成内容按行劈成数组，循环安全输出
					var forId = this.allocateId();
					this.appendFor(forId,varId+".split('\\n')",null);
					this.appendXT(forId);
					this.appendText("<br/>");
					this.appendEnd();
				}
				]]>]]<![CDATA[>
			</c:extension>
			</head>
			<body>
				<x:nl2br>随便写点什么，
				变量也行${text}
				</x:nl2br>
			</body>
			</html>
			]]>
			</x:code>
		</ul>
		<h3>真实运用示例
			[
			<a onclick='showNext(this,this.parentNode,"展开示例","隐藏示例");return false' href="#">展开示例</a>
			]</h3>
		<ul>
			<p>代码着色语法书写形式如下：</p>
			<x:code><![CDATA[
			<!-- modelVar 属性用来指定一个模板数据模型，如果存在，她会生成一个运行按钮 -->
			<x:code model="modelVar"><![CDATA[
				...这里你可以任意书写源码了,系统会自动作色...
			]]>]]&gt;&lt;/x:code>
			</x:code>
			<p>这个插件的实现在吗在layout.xhtml 中。摘录如下：</p>
			<x:code>
				<![CDATA[
<c:extension namespace="http://www.xidea.org/lite/example">
	<![CDATA[
		//代码高亮标签解析器
		function parseCode(node){
			var text = String(node.textContent);
			//清理相同的前置缩进,不因为html自动缩进影响代码格式
			while(/^(?:[\t ].*[\r\n]*)*$/.test(text)){
				text = text.replace(/^[\t ](.*)/mg,'$1');
			}
			text = JSON.stringify(text);

			//如果源码是模板，指定数据模型后需要生成一个运行测试按钮
			var model = node.getAttribute("model");
			if(model){
				text = text+ ','+model;
			}
			this.appendText("<div class='code'><script>renderSource("+text+");<\/script></div>")
		};
]]>
	]]&gt;
&lt;/c:extension>
			</x:code>
			<p>该文档系统中，有个常用的模板语法扩展:代码着色语法就是通过模板扩展来方便书写的。</p>
		</ul>
	</body>
</html>
